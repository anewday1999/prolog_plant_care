# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'plantcare.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

from datetime import datetime
import json
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import (QListWidget, QWidget, QMessageBox, 
    QApplication, QVBoxLayout)
from PyQt5.QtGui import QColor
import numpy as np
import pandas as pd
import time
from threading import Thread, local
from pprint import pprint
import requests
from time import localtime, strftime
import random
from pyswip import Prolog, Query

import pyswip, ctypes

class PrologMT(pyswip.Prolog):
    """Multi-threaded (one-to-one) pyswip.Prolog ad-hoc reimpl"""
    _swipl = pyswip.core._lib

    PL_thread_self = _swipl.PL_thread_self
    PL_thread_self.restype = ctypes.c_int

    PL_thread_attach_engine = _swipl.PL_thread_attach_engine
    PL_thread_attach_engine.argtypes = [ctypes.c_void_p]
    PL_thread_attach_engine.restype = ctypes.c_int

    @classmethod
    def _init_prolog_thread(cls):
        pengine_id = cls.PL_thread_self()
        if (pengine_id == -1):
            pengine_id = cls.PL_thread_attach_engine(None)
            print("{INFO} attach pengine to thread: %d" % pengine_id)
        if (pengine_id == -1):
            raise pyswip.prolog.PrologError("Unable to attach new Prolog engine to the thread")
        elif (pengine_id == -2):
            print("{WARN} Single-threaded swipl build, beware!")

    class _QueryWrapper(pyswip.Prolog._QueryWrapper):
        def __call__(self, *args, **kwargs):
            PrologMT._init_prolog_thread()
            return super().__call__(*args, **kwargs)

class Ui_plantcare(object):
    def __init__(self):
        self.df_plants = pd.DataFrame({'id' : [],'Name' : [], 'Species' : [], 'isGrown' : [], 'ws' : [], 'CurrentHoursUnderSunshine' : [], 'isOutside' : []})
        self.df_weather = pd.DataFrame({'Temperature': [], 'Airhumidity': [], 'windspeed': [],  'rain': [], 'dayofyears': [], 'latitude': [],  'isDay': []})
        self.df_species = pd.read_csv('./PlantTypes.csv', names=['species','ws','kp','np','isGrown'])
        self.id_needwater = []
        self.id_needlight = []
        self.id_needtobeinside = []
        self.running = False
        self.first_run = True
        self.prolog = PrologMT()
        self.prolog.consult("./main.pl")

    def setupUi(self, plantcare):
        plantcare.setObjectName("plantcare")
        plantcare.resize(975, 730)
        self.centralwidget = QtWidgets.QWidget(plantcare)
        self.centralwidget.setObjectName("centralwidget")
        self.Title = QtWidgets.QLabel(self.centralwidget)
        self.Title.setGeometry(QtCore.QRect(390, 0, 221, 41))
        font = QtGui.QFont()
        font.setPointSize(20)
        font.setBold(True)
        font.setWeight(75)
        self.Title.setFont(font)
        self.Title.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.Title.setAlignment(QtCore.Qt.AlignCenter)
        self.Title.setWordWrap(False)
        self.Title.setObjectName("Title")
        self.line = QtWidgets.QFrame(self.centralwidget)
        self.line.setGeometry(QtCore.QRect(30, 30, 911, 20))
        self.line.setFrameShape(QtWidgets.QFrame.HLine)
        self.line.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line.setObjectName("line")
        self.AddTitle = QtWidgets.QLabel(self.centralwidget)
        self.AddTitle.setGeometry(QtCore.QRect(90, 40, 151, 31))
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.AddTitle.setFont(font)
        self.AddTitle.setObjectName("AddTitle")
        self.nameInput = QtWidgets.QLineEdit(self.centralwidget)
        self.nameInput.setGeometry(QtCore.QRect(210, 90, 311, 20))
        self.nameInput.setObjectName("nameInput")
        self.NameLabel = QtWidgets.QLabel(self.centralwidget)
        self.NameLabel.setGeometry(QtCore.QRect(100, 90, 47, 21))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.NameLabel.setFont(font)
        self.NameLabel.setObjectName("NameLabel")
        self.SpeciesLabel = QtWidgets.QLabel(self.centralwidget)
        self.SpeciesLabel.setGeometry(QtCore.QRect(100, 160, 111, 21))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.SpeciesLabel.setFont(font)
        self.SpeciesLabel.setObjectName("SpeciesLabel")
        self.noteName = QtWidgets.QLabel(self.centralwidget)
        self.noteName.setGeometry(QtCore.QRect(210, 110, 311, 41))
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(109, 109, 109))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Text, brush)
        brush = QtGui.QBrush(QtGui.QColor(109, 109, 109))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Text, brush)
        brush = QtGui.QBrush(QtGui.QColor(120, 120, 120))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(120, 120, 120))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Text, brush)
        self.noteName.setPalette(palette)
        font = QtGui.QFont()
        font.setPointSize(9)
        self.noteName.setFont(font)
        self.noteName.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.noteName.setAutoFillBackground(True)
        self.noteName.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignTop)
        self.noteName.setWordWrap(True)
        self.noteName.setObjectName("noteName")
        self.submitBut = QtWidgets.QPushButton(self.centralwidget)
        self.submitBut.setGeometry(QtCore.QRect(200, 260, 101, 51))
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Text, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 150, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.ButtonText, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 17, 17))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Highlight, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.HighlightedText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Text, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 150, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.ButtonText, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 17, 17))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Highlight, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.HighlightedText, brush)
        brush = QtGui.QBrush(QtGui.QColor(120, 120, 120))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(120, 120, 120))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Text, brush)
        brush = QtGui.QBrush(QtGui.QColor(120, 120, 120))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.ButtonText, brush)
        brush = QtGui.QBrush(QtGui.QColor(240, 240, 240))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 120, 215))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Highlight, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.HighlightedText, brush)
        self.submitBut.setPalette(palette)
        font = QtGui.QFont()
        font.setPointSize(9)
        font.setBold(True)
        font.setWeight(75)
        self.submitBut.setFont(font)
        self.submitBut.setObjectName("submitBut")
        self.Status = QtWidgets.QTextBrowser(self.centralwidget)
        self.Status.setGeometry(QtCore.QRect(160, 320, 351, 31))
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(134, 134, 134))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Light, brush)
        brush = QtGui.QBrush(QtGui.QColor(154, 151, 150))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Text, brush)
        brush = QtGui.QBrush(QtGui.QColor(240, 240, 240))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.BrightText, brush)
        brush = QtGui.QBrush(QtGui.QColor(240, 240, 240))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(134, 134, 134))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Light, brush)
        brush = QtGui.QBrush(QtGui.QColor(154, 151, 150))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Text, brush)
        brush = QtGui.QBrush(QtGui.QColor(240, 240, 240))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.BrightText, brush)
        brush = QtGui.QBrush(QtGui.QColor(240, 240, 240))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(120, 120, 120))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Light, brush)
        brush = QtGui.QBrush(QtGui.QColor(120, 120, 120))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Text, brush)
        brush = QtGui.QBrush(QtGui.QColor(240, 240, 240))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.BrightText, brush)
        brush = QtGui.QBrush(QtGui.QColor(240, 240, 240))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Base, brush)
        self.Status.setPalette(palette)
        self.Status.setAutoFillBackground(True)
        self.Status.setObjectName("Status")
        self.line_2 = QtWidgets.QFrame(self.centralwidget)
        self.line_2.setGeometry(QtCore.QRect(30, 380, 921, 20))
        self.line_2.setLineWidth(3)
        self.line_2.setFrameShape(QtWidgets.QFrame.HLine)
        self.line_2.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_2.setObjectName("line_2")
        self.listPlants = QtWidgets.QTextBrowser(self.centralwidget)
        self.listPlants.setGeometry(QtCore.QRect(610, 90, 311, 261))
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(240, 240, 240))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(240, 240, 240))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.NoRole, brush)
        brush = QtGui.QBrush(QtGui.QColor(240, 240, 240))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(240, 240, 240))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.NoRole, brush)
        brush = QtGui.QBrush(QtGui.QColor(240, 240, 240))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(240, 240, 240))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.NoRole, brush)
        self.listPlants.setPalette(palette)
        self.listPlants.setDocumentTitle("")
        self.listPlants.setObjectName("listPlants")
        self.line_3 = QtWidgets.QFrame(self.centralwidget)
        self.line_3.setGeometry(QtCore.QRect(20, 390, 20, 291))
        self.line_3.setFrameShape(QtWidgets.QFrame.VLine)
        self.line_3.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_3.setObjectName("line_3")
        self.listLabel = QtWidgets.QLabel(self.centralwidget)
        self.listLabel.setGeometry(QtCore.QRect(610, 70, 81, 16))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.listLabel.setFont(font)
        self.listLabel.setObjectName("listLabel")
        self.startButton = QtWidgets.QPushButton(self.centralwidget)
        self.startButton.setGeometry(QtCore.QRect(140, 480, 75, 61))
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(0, 150, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.ButtonText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 150, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.ButtonText, brush)
        brush = QtGui.QBrush(QtGui.QColor(120, 120, 120))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.ButtonText, brush)
        self.startButton.setPalette(palette)
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.startButton.setFont(font)
        self.startButton.setObjectName("startButton")
        self.startLabel = QtWidgets.QLabel(self.centralwidget)
        self.startLabel.setGeometry(QtCore.QRect(90, 390, 191, 16))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.startLabel.setFont(font)
        self.startLabel.setObjectName("startLabel")
        self.line_4 = QtWidgets.QFrame(self.centralwidget)
        self.line_4.setGeometry(QtCore.QRect(330, 390, 20, 291))
        self.line_4.setFrameShape(QtWidgets.QFrame.VLine)
        self.line_4.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_4.setObjectName("line_4")
        self.line_5 = QtWidgets.QFrame(self.centralwidget)
        self.line_5.setGeometry(QtCore.QRect(940, 390, 20, 291))
        self.line_5.setFrameShape(QtWidgets.QFrame.VLine)
        self.line_5.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_5.setObjectName("line_5")
        self.deleteBut = QtWidgets.QPushButton(self.centralwidget)
        self.deleteBut.setGeometry(QtCore.QRect(370, 260, 101, 51))
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Text, brush)
        brush = QtGui.QBrush(QtGui.QColor(150, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.ButtonText, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 17, 17))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Highlight, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.HighlightedText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Text, brush)
        brush = QtGui.QBrush(QtGui.QColor(150, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.ButtonText, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 17, 17))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Highlight, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.HighlightedText, brush)
        brush = QtGui.QBrush(QtGui.QColor(120, 120, 120))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(120, 120, 120))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Text, brush)
        brush = QtGui.QBrush(QtGui.QColor(120, 120, 120))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.ButtonText, brush)
        brush = QtGui.QBrush(QtGui.QColor(240, 240, 240))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 120, 215))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Highlight, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.HighlightedText, brush)
        self.deleteBut.setPalette(palette)
        font = QtGui.QFont()
        font.setPointSize(9)
        font.setBold(True)
        font.setWeight(75)
        self.deleteBut.setFont(font)
        self.deleteBut.setObjectName("deleteBut")
        self.timeStepLabel = QtWidgets.QLabel(self.centralwidget)
        self.timeStepLabel.setGeometry(QtCore.QRect(60, 430, 61, 21))
        self.timeStepLabel.setObjectName("timeStepLabel")
        self.nameInput_2 = QtWidgets.QLineEdit(self.centralwidget)
        self.nameInput_2.setGeometry(QtCore.QRect(140, 430, 81, 21))
        self.nameInput_2.setObjectName("nameInput_2")
        self.weatherOutput = QtWidgets.QTextBrowser(self.centralwidget)
        self.weatherOutput.setGeometry(QtCore.QRect(70, 560, 221, 71))
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(240, 240, 240))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Light, brush)
        brush = QtGui.QBrush(QtGui.QColor(240, 240, 240))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.BrightText, brush)
        brush = QtGui.QBrush(QtGui.QColor(240, 240, 240))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(240, 240, 240))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.HighlightedText, brush)
        brush = QtGui.QBrush(QtGui.QColor(240, 240, 240))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.NoRole, brush)
        brush = QtGui.QBrush(QtGui.QColor(240, 240, 240))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Light, brush)
        brush = QtGui.QBrush(QtGui.QColor(240, 240, 240))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.BrightText, brush)
        brush = QtGui.QBrush(QtGui.QColor(240, 240, 240))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(240, 240, 240))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.HighlightedText, brush)
        brush = QtGui.QBrush(QtGui.QColor(240, 240, 240))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.NoRole, brush)
        brush = QtGui.QBrush(QtGui.QColor(240, 240, 240))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Light, brush)
        brush = QtGui.QBrush(QtGui.QColor(240, 240, 240))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.BrightText, brush)
        brush = QtGui.QBrush(QtGui.QColor(240, 240, 240))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(240, 240, 240))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.HighlightedText, brush)
        brush = QtGui.QBrush(QtGui.QColor(240, 240, 240))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.NoRole, brush)
        self.weatherOutput.setPalette(palette)
        self.weatherOutput.setDocumentTitle("")
        self.weatherOutput.setObjectName("weatherOutput")
        self.isGrownCheckbox = QtWidgets.QCheckBox(self.centralwidget)
        self.isGrownCheckbox.setGeometry(QtCore.QRect(210, 210, 121, 31))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.isGrownCheckbox.setFont(font)
        self.isGrownCheckbox.setIconSize(QtCore.QSize(16, 16))
        self.isGrownCheckbox.setObjectName("isGrownCheckbox")
        self.isOutsideCheckbox = QtWidgets.QCheckBox(self.centralwidget)
        self.isOutsideCheckbox.setGeometry(QtCore.QRect(340, 210, 121, 31))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.isOutsideCheckbox.setFont(font)
        self.isOutsideCheckbox.setIconSize(QtCore.QSize(16, 16))
        self.isOutsideCheckbox.setObjectName("isOutsideCheckbox")
        self.speciesInputBox = QtWidgets.QComboBox(self.centralwidget)
        self.speciesInputBox.setGeometry(QtCore.QRect(210, 160, 211, 31))
        self.speciesInputBox.setObjectName("speciesInputBox")
        self.listNeedWater = QtWidgets.QListWidget(self.centralwidget)
        self.listNeedWater.setGeometry(QtCore.QRect(350, 430, 191, 201))
        self.listNeedWater.setObjectName("listNeedWater")
        self.line_6 = QtWidgets.QFrame(self.centralwidget)
        self.line_6.setGeometry(QtCore.QRect(30, 670, 921, 20))
        self.line_6.setLineWidth(3)
        self.line_6.setFrameShape(QtWidgets.QFrame.HLine)
        self.line_6.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_6.setObjectName("line_6")
        self.needWaterLabel = QtWidgets.QLabel(self.centralwidget)
        self.needWaterLabel.setGeometry(QtCore.QRect(350, 410, 131, 16))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.needWaterLabel.setFont(font)
        self.needWaterLabel.setObjectName("needWaterLabel")
        self.listNeedLight = QtWidgets.QListWidget(self.centralwidget)
        self.listNeedLight.setGeometry(QtCore.QRect(550, 430, 191, 201))
        self.listNeedLight.setObjectName("listNeedLight")
        self.listNeedInside = QtWidgets.QListWidget(self.centralwidget)
        self.listNeedInside.setGeometry(QtCore.QRect(750, 430, 191, 201))
        self.listNeedInside.setObjectName("listNeedInside")
        self.needLightLabel = QtWidgets.QLabel(self.centralwidget)
        self.needLightLabel.setGeometry(QtCore.QRect(550, 410, 131, 16))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.needLightLabel.setFont(font)
        self.needLightLabel.setObjectName("needLightLabel")
        self.needInsideLabel = QtWidgets.QLabel(self.centralwidget)
        self.needInsideLabel.setGeometry(QtCore.QRect(750, 410, 171, 16))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.needInsideLabel.setFont(font)
        self.needInsideLabel.setObjectName("needInsideLabel")
        self.noteAction = QtWidgets.QLabel(self.centralwidget)
        self.noteAction.setGeometry(QtCore.QRect(380, 640, 551, 31))
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(109, 109, 109))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Text, brush)
        brush = QtGui.QBrush(QtGui.QColor(109, 109, 109))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Text, brush)
        brush = QtGui.QBrush(QtGui.QColor(120, 120, 120))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(120, 120, 120))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Text, brush)
        self.noteAction.setPalette(palette)
        font = QtGui.QFont()
        font.setPointSize(9)
        self.noteAction.setFont(font)
        self.noteAction.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.noteAction.setAutoFillBackground(True)
        self.noteAction.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignTop)
        self.noteAction.setWordWrap(True)
        self.noteAction.setObjectName("noteAction")
        plantcare.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(plantcare)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 975, 21))
        self.menubar.setObjectName("menubar")
        plantcare.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(plantcare)
        self.statusbar.setObjectName("statusbar")
        plantcare.setStatusBar(self.statusbar)

        species = []
        for i in self.df_species.iterrows():
            if i[1][0] not in species:
                species.append(i[1][0])
                self.speciesInputBox.addItem(str(i[1][0]))


        self.retranslateUi(plantcare)
        QtCore.QMetaObject.connectSlotsByName(plantcare)

        self.displayList()

        self.listNeedWater.itemDoubleClicked.connect(self.clickItem)
        self.listNeedLight.itemDoubleClicked.connect(self.clickItem)
        self.listNeedInside.itemDoubleClicked.connect(self.clickItem)
        self.submitBut.clicked.connect(self.pressSubmit)
        self.deleteBut.clicked.connect(self.pressDelete)
        self.startButton.clicked.connect(self.pressStart)
    
    def get_current_plants(self):
        try:
            self.df_plants = pd.read_csv('./Plants.csv', names=['id','Name', 'Species', 'isGrown', 'ws', 'CurrentHoursUnderSunshine', 'isOutside'])
        except Exception as e:
            print('error 529line: ', e)

    def checkInput(self, namePlant):
        # -3 this name existed
        # -4 name is empty
        # 0 OKE
        '''df = pd.read_csv('./PlantTypes.csv', names=['species','ws','kp','np','isGrown'])


        if specie == '':
            return -1
        if not (specie in df.values):
            return -2'''
        if namePlant == '':
            return -4
        if namePlant in self.df_plants['Name'].values:
            return -3
        
        return 0

    def displayList(self):
        self.get_current_plants()
        print(self.df_plants.head(10))
        self.listPlants.clear()
        for i in range(len(self.df_plants)):
            text = self.df_plants['Name'].iloc[-1-i] + ' ' + self.df_plants['Species'].iloc[-1-i]

            word = '<span style=\" color: #0d1f45;\">%s</span>' % text
            self.listPlants.append(word)

    def save_plants(self):
        #self.df_plants.to_csv('./plants.csv', index=False, header=None)
        self.get_current_plants()
        list(self.prolog.query("updatePlantsFile."))

    def save_weather(self):
        self.df_weather.to_csv('./weather.csv', index=False, header=None)

    def displayWeather(self):

        local_time = strftime("%Y-%m-%d %H:%M:%S", localtime())


        self.weatherOutput.clear()

        text = 'Started at: ' + str(local_time)
        word = '<span style=\" color: #0d1f45;\">%s</span>' % text
        self.weatherOutput.append(word)

    def clickItem(self, item):

        self.get_current_plants()
        
        print('before click:')
        print(self.id_needwater)
        print(self.id_needlight)
        print(self.id_needtobeinside)
        #lay ten cua item vua click
        clicked = item.text()

        #lay id cua item do
        for plant in self.df_plants.iterrows():
            if clicked == plant[1][1]:
                id_clicked = plant[1][0]
        

        #Xoa id trong danh sach
        if id_clicked in self.id_needwater:

            self.id_needwater.remove(id_clicked)
            list(self.prolog.query("watering({:d}).".format(id_clicked)))

        if id_clicked in self.id_needlight:

            self.id_needlight.remove(id_clicked)
            list(self.prolog.query("puttingOutside({:d}).".format(id_clicked)))

        if id_clicked in self.id_needtobeinside:

            self.id_needtobeinside.remove(id_clicked)
            list(self.prolog.query("puttingInside({:d}).".format(id_clicked)))

        print('after click')
        print(self.id_needwater)
        print(self.id_needlight)
        print(self.id_needtobeinside)
        
        self.display_plants_need_somethings()

    def display_plants_need_somethings(self):
        self.get_current_plants()
        self.listNeedWater.clear()
        self.listNeedLight.clear()
        self.listNeedInside.clear()
        for plant in self.df_plants.iterrows():
            item = str(plant[1][1])
            for id_w in self.id_needwater:
                if id_w == plant[1][0]:
                    self.listNeedWater.addItem(item)
            for id_l in self.id_needlight:
                if id_l == plant[1][0]:
                    self.listNeedLight.addItem(item)
            for id_is in self.id_needtobeinside:
                if id_is == plant[1][0]:
                    self.listNeedInside.addItem(item)
        print('in display:')
        print(self.id_needwater)
        print(self.id_needlight)
        print(self.id_needtobeinside)

                


    def run(self):
        while self.running == True:
            print(self.df_plants.head(10))
            r = requests.get('http://api.openweathermap.org/data/2.5/weather?q=lipetsk&appid=f3aee7c3b6bfb084ec625bc705b28192')
            jsonres = r.json()
            #pprint(jsonres)
            main = jsonres['main']

            #local_time = strftime("%Y-%m-%d %H:%M:%S", localtime())
            localtime = datetime.now()

            #nhiet do
            tempe = round(main['temp'] - 273.15, 1)

            #do am
            ah = main['humidity']

            #gio
            windspeed = jsonres['wind']['speed']

            #luong mua
            try:
                rain = jsonres['rain']['1h']
            except Exception as e:
                #print(e)
                rain = 0

            #ngay trong nam
            year = int(localtime.year)
            month = int(localtime.month)
            day = int(localtime.day)
            thutu = 0
            for i in range (1, month):
                if (i == 1 or i == 3 or i == 5 or i == 7 or i == 8 or i == 10 or i == 12):
                    thutu += 31
                elif i == 4 or i == 6 or i == 9 or i == 11:
                    thutu += 30
                elif i == 2:
                    if ((year % 4 == 0 and year % 100 != 0) or year % 400 == 0): # nhuan
                        thutu += 29
                    else:
                        thutu += 28
            thutu += day

            #latitude:
            lat = jsonres['coord']['lat']
            lat = (float(lat) *3.14) / 180 # to radians

            #is day
            now_timestamp = int((time.mktime(localtime.timetuple())))
            if ((now_timestamp > jsonres['sys']['sunrise']) and (now_timestamp < jsonres['sys']['sunset'])):
                isday = 1 # ngay
            else:
                isday = 0 # dem



            new_row = {'Temperature': [tempe], 'Airhumidity': [ah], 'windspeed': [windspeed],  'rain': [rain], 'dayofyears': [thutu], 'latitude': [lat],  'isDay': [isday]}
            self.df_weather = pd.DataFrame(new_row)
            print('===============')
            #print(self.df_weather.tail(5))
            self.save_weather()

            timeStep = self.nameInput_2.text()
            try:
                timeStep = float(timeStep)
            except Exception as e:
                timeStep = 60
            if timeStep < 1:
                return 60
            #update
            list(self.prolog.query("update."))
            self.id_needtobeinside = []
            self.id_needlight = []
            self.id_needwater = []
            #recive list need action
            for res in self.prolog.query("needsWater(Id)"):
                print("Needs Water",res['Id'])
                self.id_needwater.append(res['Id'])

            for res in self.prolog.query("needsLight(Id)"):
                print("Needs Light",res['Id'])
                self.id_needlight.append(res['Id'])

            for res in self.prolog.query("needsToBeInside(Id)"):
                print("Needs To Be Inside",res['Id'])
                self.id_needtobeinside.append(res['Id'])
            print(self.id_needwater)
            print(self.id_needlight)
            print(self.id_needtobeinside)


            #display
            self.display_plants_need_somethings()
            

            self.save_plants()
            self.get_current_plants()
            print(self.df_plants.head(10))
            time.sleep(timeStep)

    def pressSubmit(self):
        self.get_current_plants()
        
        check = self.checkInput(self.nameInput.text())
        if check == -1:
            self.Status.setText('Specie is empty!!!')
            self.Status.setStyleSheet("color: #ff0000")
        elif check == -2:
            self.Status.setText('Specie not defined!!!')
            self.Status.setStyleSheet("color: #ff0000")
        elif check == -3:
            self.Status.setText('This name was existed!!!')
            self.Status.setStyleSheet("color: #ff0000")
        elif check == -4:
            self.Status.setText('Name is empty!!!')
            self.Status.setStyleSheet("color: #ff0000")
        elif check == 0:

            #checkbox
            if self.isGrownCheckbox.isChecked() == True:
                ig = 1
            else:
                ig = 0
            if self.isOutsideCheckbox.isChecked() == True:
                io = 1
            else:
                io = 0

            #id
            i_id = 0
            while True:
                if not (i_id in self.df_plants['id'].tolist()):
                    id = i_id
                    break
                else:
                    i_id += 1


            self.Status.setText(self.nameInput.text() + ' was added.')
            self.Status.setStyleSheet("color: #29891a")

            print("insertPlant({:d}, {:s}, {:s}, {:d}, {:d}).".format(id, self.nameInput.text(), self.speciesInputBox.currentText(), ig, io))

            list(self.prolog.query("insertPlant({:d}, '{:s}', '{:s}', {:d}, {:d}).".format(id, self.nameInput.text(), self.speciesInputBox.currentText(), ig, io)))

            self.save_plants()

            self.displayList()
        
    def pressDelete(self):
        self.get_current_plants()
        if self.nameInput.text() in self.df_plants['Name'].values:

            self.Status.setText(self.nameInput.text() + ' was deleted.')
            self.Status.setStyleSheet("color: #29891a")

            print(np.array(self.df_plants[self.df_plants['Name'].astype(str) == self.nameInput.text()]['id'])[0])

            list(self.prolog.query("deletePlant({:d}).".format(np.array(self.df_plants[self.df_plants['Name'].astype(str) == self.nameInput.text()]['id'])[0] )))

            self.displayList()
            self.save_plants()

        else:

            self.Status.setText('Name is not exist!!!')
            self.Status.setStyleSheet("color: #ff0000")

        


    def pressStart(self):
        if self.nameInput_2.text().isnumeric():
            self.running = not self.running
            if self.running == True:
                self.displayWeather()
                self.startButton.setText("RUNNING")
                self.startButton.setStyleSheet("color: #ff0000")
                t1 = Thread(target=self.run, args=(), daemon=True)
                t1.start()

                
            else:
                self.startButton.setText("START")
                self.startButton.setStyleSheet("color: #009600")


            
            print("Click start/stop")
        else:
            print('Error input')
            pass
    

    def retranslateUi(self, plantcare):
        _translate = QtCore.QCoreApplication.translate
        plantcare.setWindowTitle(_translate("plantcare", "plantcare"))
        self.Title.setText(_translate("plantcare", "PLANT CARE"))
        self.AddTitle.setText(_translate("plantcare", "Add a new plant:"))
        self.NameLabel.setText(_translate("plantcare", "Name:"))
        self.SpeciesLabel.setText(_translate("plantcare", "Species:"))
        self.noteName.setText(_translate("plantcare", " Name can be the type of tree, and the name must be unique, you will probably get a warning that the name already exists."))
        self.submitBut.setText(_translate("plantcare", "SUBMIT"))
        self.Status.setHtml(_translate("plantcare", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'MS Shell Dlg 2\'; font-size:8.25pt; font-weight:400; font-style:normal;\">\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">Status...</p></body></html>"))
        self.listPlants.setHtml(_translate("plantcare", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'MS Shell Dlg 2\'; font-size:8.25pt; font-weight:400; font-style:normal;\">\n"
"<p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br /></p></body></html>"))
        self.listLabel.setText(_translate("plantcare", "List plants:"))
        self.startButton.setText(_translate("plantcare", "START"))
        self.startLabel.setText(_translate("plantcare", "Start receiving notifications:"))
        self.deleteBut.setText(_translate("plantcare", "DELETE"))
        self.timeStepLabel.setText(_translate("plantcare", "Time step(s):"))
        self.weatherOutput.setHtml(_translate("plantcare", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'MS Shell Dlg 2\'; font-size:8.25pt; font-weight:400; font-style:normal;\">\n"
"<p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br /></p></body></html>"))
        self.isGrownCheckbox.setText(_translate("plantcare", "Is grown."))
        self.isOutsideCheckbox.setText(_translate("plantcare", "Is outside."))
        self.needWaterLabel.setText(_translate("plantcare", "Plants need water:"))
        self.needLightLabel.setText(_translate("plantcare", "Plants need light:"))
        self.needInsideLabel.setText(_translate("plantcare", "Plants need to be inside:"))
        self.noteAction.setText(_translate("plantcare", "Please double click on each line, to let the program know that you have taken care of the plant."))


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    plantcare = QtWidgets.QMainWindow()
    ui = Ui_plantcare()
    ui.setupUi(plantcare)
    plantcare.show()
    sys.exit(app.exec_())
